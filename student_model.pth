import torch
from torch_geometric.nn import GCNConv
import torch.nn.functional as F

class StudentGNN(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels):
        super(StudentGNN, self).__init__()
        self.conv1 = GCNConv(in_channels, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, out_channels)

    def forward(self, x, edge_index):
        x = F.relu(self.conv1(x, edge_index))
        x = self.conv2(x, edge_index)
        return F.log_softmax(x, dim=1)

# Load the model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
student_model = StudentGNN(in_channels=5, hidden_channels=32, out_channels=2)
student_model.load_state_dict(torch.load("student_model.pth", map_location=device))
student_model.eval()
